
AVR_lcd_atmega168p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000034c  000003e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000034c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080010c  0080010c  000003ec  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000be  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000158  00000000  00000000  000004ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000089  00000000  00000000  00000622  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002de  00000000  00000000  000006ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  0000098c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000152  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e4       	ldi	r30, 0x4C	; 76
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  9e:	0c 94 a4 01 	jmp	0x348	; 0x348 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:

//************************Timer 0 overflow interrupt service routine***********************
//
//interrupt [TIM0_OVF] void timer0_ovf_isr(void)
ISR(TIMER0_OVF_vect)    // vector 16 of M168
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  // Re-load Timer 0 value
  TCNT0=5; //Timer0 period = 0.125 usec = 8MHZ/64. 2msec = 8 usec*250 5 = 255-250 5/4/05
  b4:	85 e0       	ldi	r24, 0x05	; 5
  b6:	86 bd       	out	0x26, r24	; 38
  state_counter++;
  b8:	80 91 00 01 	lds	r24, 0x0100
  bc:	8f 5f       	subi	r24, 0xFF	; 255
  be:	80 93 00 01 	sts	0x0100, r24
  output_change = 1; // This is a flag for main loop
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	90 93 0d 01 	sts	0x010D, r25
  if (state_counter > 7) state_counter = 0;
  c8:	88 30       	cpi	r24, 0x08	; 8
  ca:	10 f0       	brcs	.+4      	; 0xd0 <__vector_16+0x2a>
  cc:	10 92 00 01 	sts	0x0100, r1
}
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <initialization>:

//************************Initialization function defined here***********************
void initialization(void) {
  // Declare your local variables here
  // Crystal Oscillator division factor: 1
  CLKPR=0x80;
  de:	e1 e6       	ldi	r30, 0x61	; 97
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 e8       	ldi	r24, 0x80	; 128
  e4:	80 83       	st	Z, r24
  CLKPR=0x00;
  e6:	10 82       	st	Z, r1
  //DDRC=0x7F; //7 Segment outputs
  // Timer/Counter 0 initialization
  TCCR0A=0x00;
  e8:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x03; // = 8MHz/64 3/22/05
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	85 bd       	out	0x25, r24	; 37
  TCNT0=0xC1;
  ee:	81 ec       	ldi	r24, 0xC1	; 193
  f0:	86 bd       	out	0x26, r24	; 38
  // INT0: Off
  // INT1: Off
  // Interrupt on any change on pins PCINT0-7: Off
  // Interrupt on any change on pins PCINT8-14: Off
  // Interrupt on any change on pins PCINT16-23: Off
  EICRA=0x00;
  f2:	10 92 69 00 	sts	0x0069, r1
  EIMSK=0x00;
  f6:	1d ba       	out	0x1d, r1	; 29
  PCICR=0x00;
  f8:	10 92 68 00 	sts	0x0068, r1
  // Timer/Counter 0 Interrupt(s) initialization
  TIMSK0=0x01;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 6e 00 	sts	0x006E, r24
  // Timer/Counter 1 Interrupt(s) initialization
  TIMSK1=0x00;
 102:	10 92 6f 00 	sts	0x006F, r1
  // Timer/Counter 2 Interrupt(s) initialization
  TIMSK2=0x00;
 106:	10 92 70 00 	sts	0x0070, r1
  // Analog Comparator initialization
  // Analog Comparator: Off
  // Analog Comparator Input Capture Dy Timer/Counter 1: Off
  //************************End of Initialization function ***************************
}
 10a:	08 95       	ret

0000010c <main>:
//*********************End of Interrupt Service Routine*************************************


//**********************Main Begins here****************************************************
//void main(void) {
int main(void) { // port to avr-gcc
 10c:	8f 92       	push	r8
 10e:	9f 92       	push	r9
 110:	af 92       	push	r10
 112:	bf 92       	push	r11
 114:	cf 92       	push	r12
 116:	df 92       	push	r13
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
//* * * * * Call Initialization function * * * * * *see function defined below* * * * * * *
    initialization();
 124:	0e 94 6f 00 	call	0xde	; 0xde <initialization>


//* * * * * * * Eanble Global enable interrupts* * * * * * * * ** *
    //#asm("sei");
    asm volatile("sei"::);
 128:	78 94       	sei
    while (1)
    {
      if(output_change){
      output_change = 0;
      // The following state_counter generates the 4 COM output waveforms via PORTD, each with HI and LOW outputs
      switch (state_counter) {
 12a:	40 91 00 01 	lds	r20, 0x0100
 12e:	80 91 0d 01 	lds	r24, 0x010D
 132:	20 91 0c 01 	lds	r18, 0x010C
 136:	e0 90 0e 01 	lds	r14, 0x010E
 13a:	10 91 12 01 	lds	r17, 0x0112
 13e:	f0 90 0f 01 	lds	r15, 0x010F
 142:	d0 90 11 01 	lds	r13, 0x0111
 146:	00 91 10 01 	lds	r16, 0x0110
        DDRC = 0xFF; // always on
        DDRD = 0x02; //COM2 asserted LOW
        }
        break;
      case 3: {
        PORTD = 0x02;
 14a:	52 e0       	ldi	r21, 0x02	; 2
 14c:	a5 2e       	mov	r10, r21
        PORTC = segs_out ^ 0xFF; // Compliment segment outputs
        DDRC =0xFF;
 14e:	5f ef       	ldi	r21, 0xFF	; 255
        DDRC = 0xFF;
        DDRD = 0x04; //COM3 asserted LOW
        }
        break;
      case 5: {
        PORTD = 0x04;
 150:	34 e0       	ldi	r19, 0x04	; 4
 152:	b3 2e       	mov	r11, r19
        DDRD = 0;
        PORTD = 0x00;
        // PORTC = 0x00;//LCD_d_3 ^ 0xFF; // Compliment segment outputs
        PORTC = segs_out;
        DDRC = 0xFF;
        DDRD = 0x08; //COM4 asserted LOW
 154:	98 e0       	ldi	r25, 0x08	; 8
 156:	c9 2e       	mov	r12, r25
        }
        break;
      case 7: {
        PORTD = 0x08;
        PORTC = 0x55;
 158:	b5 e5       	ldi	r27, 0x55	; 85
 15a:	9b 2e       	mov	r9, r27
        segs_out = segs_out | ((segment_table[LCD_d_4]& 0x03)*64); //get digit_1000's A & B bits
        DDRD = 0;
        PORTD = 0x00;
        PORTC = segs_out;
        DDRC = 0xFF; // always on
        DDRD = 0x01; //COM1 asserted LOW
 15c:	88 24       	eor	r8, r8
 15e:	83 94       	inc	r8
      switch (state_counter) {
      case 0: {
        segs_out = (segment_table[LCD_d_1]& 0x03); //get digit_1's A & B bits
        segs_out = segs_out | ((segment_table[LCD_d_2]& 0x03)*4); //get digit_10's A & B bits
        segs_out = segs_out | ((segment_table[LCD_d_3]& 0x03)*16); //get digit_100's A & B bits
        segs_out = segs_out | ((segment_table[LCD_d_4]& 0x03)*64); //get digit_1000's A & B bits
 160:	6d 2d       	mov	r22, r13
 162:	70 e0       	ldi	r23, 0x00	; 0
        break;
      case 4: {
        segs_out = (segment_table[LCD_d_1]& 0x30)/16; //get digit_1's A & B bits
        segs_out = segs_out | ((segment_table[LCD_d_2]& 0x30)/4);//get digit_10's A & B bits
        segs_out = segs_out | (segment_table[LCD_d_3]& 0x30);//get digit_100's A & B bits
        segs_out = segs_out | ((segment_table[LCD_d_4]& 0x30)*4);//get digit_1000's A & B bits
 164:	6f 5f       	subi	r22, 0xFF	; 255
 166:	7e 4f       	sbci	r23, 0xFE	; 254
      if(output_change){
      output_change = 0;
      // The following state_counter generates the 4 COM output waveforms via PORTD, each with HI and LOW outputs
      switch (state_counter) {
      case 0: {
        segs_out = (segment_table[LCD_d_1]& 0x03); //get digit_1's A & B bits
 168:	ce 2d       	mov	r28, r14
 16a:	d0 e0       	ldi	r29, 0x00	; 0
        segs_out = segs_out | ((segment_table[LCD_d_2]& 0x03)*4); //get digit_10's A & B bits
 16c:	af 2d       	mov	r26, r15
 16e:	b0 e0       	ldi	r27, 0x00	; 0
        segs_out = segs_out | ((segment_table[LCD_d_3]& 0x03)*16); //get digit_100's A & B bits
 170:	e0 2f       	mov	r30, r16
 172:	f0 e0       	ldi	r31, 0x00	; 0

//**********The following infinate While Loop contains the Switch statement for LCD refresh******
#if LCD_Driver
    while (1)
    {
      if(output_change){
 174:	88 23       	and	r24, r24
 176:	09 f4       	brne	.+2      	; 0x17a <main+0x6e>
 178:	e6 c0       	rjmp	.+460    	; 0x346 <main+0x23a>
      output_change = 0;
      // The following state_counter generates the 4 COM output waveforms via PORTD, each with HI and LOW outputs
      switch (state_counter) {
 17a:	43 30       	cpi	r20, 0x03	; 3
 17c:	09 f4       	brne	.+2      	; 0x180 <main+0x74>
 17e:	66 c0       	rjmp	.+204    	; 0x24c <main+0x140>
 180:	44 30       	cpi	r20, 0x04	; 4
 182:	58 f4       	brcc	.+22     	; 0x19a <main+0x8e>
 184:	41 30       	cpi	r20, 0x01	; 1
 186:	c1 f1       	breq	.+112    	; 0x1f8 <main+0xec>
 188:	af 5f       	subi	r26, 0xFF	; 255
 18a:	be 4f       	sbci	r27, 0xFE	; 254
 18c:	ef 5f       	subi	r30, 0xFF	; 255
 18e:	fe 4f       	sbci	r31, 0xFE	; 254
 190:	cf 5f       	subi	r28, 0xFF	; 255
 192:	de 4f       	sbci	r29, 0xFE	; 254
 194:	42 30       	cpi	r20, 0x02	; 2
 196:	b8 f5       	brcc	.+110    	; 0x206 <main+0xfa>
 198:	0d c0       	rjmp	.+26     	; 0x1b4 <main+0xa8>
 19a:	45 30       	cpi	r20, 0x05	; 5
 19c:	09 f4       	brne	.+2      	; 0x1a0 <main+0x94>
 19e:	86 c0       	rjmp	.+268    	; 0x2ac <main+0x1a0>
 1a0:	45 30       	cpi	r20, 0x05	; 5
 1a2:	08 f4       	brcc	.+2      	; 0x1a6 <main+0x9a>
 1a4:	5a c0       	rjmp	.+180    	; 0x25a <main+0x14e>
 1a6:	46 30       	cpi	r20, 0x06	; 6
 1a8:	09 f4       	brne	.+2      	; 0x1ac <main+0xa0>
 1aa:	87 c0       	rjmp	.+270    	; 0x2ba <main+0x1ae>
 1ac:	47 30       	cpi	r20, 0x07	; 7
 1ae:	09 f0       	breq	.+2      	; 0x1b2 <main+0xa6>
 1b0:	b2 c0       	rjmp	.+356    	; 0x316 <main+0x20a>
 1b2:	a9 c0       	rjmp	.+338    	; 0x306 <main+0x1fa>
      case 0: {
        segs_out = (segment_table[LCD_d_1]& 0x03); //get digit_1's A & B bits
        segs_out = segs_out | ((segment_table[LCD_d_2]& 0x03)*4); //get digit_10's A & B bits
        segs_out = segs_out | ((segment_table[LCD_d_3]& 0x03)*16); //get digit_100's A & B bits
        segs_out = segs_out | ((segment_table[LCD_d_4]& 0x03)*64); //get digit_1000's A & B bits
 1b4:	8c 91       	ld	r24, X
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	83 70       	andi	r24, 0x03	; 3
 1ba:	90 70       	andi	r25, 0x00	; 0
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	20 81       	ld	r18, Z
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	23 70       	andi	r18, 0x03	; 3
 1ca:	30 70       	andi	r19, 0x00	; 0
 1cc:	f4 e0       	ldi	r31, 0x04	; 4
 1ce:	22 0f       	add	r18, r18
 1d0:	33 1f       	adc	r19, r19
 1d2:	fa 95       	dec	r31
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <main+0xc2>
 1d6:	82 2b       	or	r24, r18
 1d8:	28 81       	ld	r18, Y
 1da:	23 70       	andi	r18, 0x03	; 3
 1dc:	82 2b       	or	r24, r18
 1de:	fb 01       	movw	r30, r22
 1e0:	20 81       	ld	r18, Z
 1e2:	22 95       	swap	r18
 1e4:	22 0f       	add	r18, r18
 1e6:	22 0f       	add	r18, r18
 1e8:	20 7c       	andi	r18, 0xC0	; 192
 1ea:	28 2b       	or	r18, r24
        DDRD = 0;
 1ec:	1a b8       	out	0x0a, r1	; 10
        PORTD = 0x00;
 1ee:	1b b8       	out	0x0b, r1	; 11
        PORTC = segs_out;
 1f0:	28 b9       	out	0x08, r18	; 8
        DDRC = 0xFF; // always on
 1f2:	57 b9       	out	0x07, r21	; 7
        DDRD = 0x01; //COM1 asserted LOW
 1f4:	8a b8       	out	0x0a, r8	; 10
 1f6:	91 c0       	rjmp	.+290    	; 0x31a <main+0x20e>
        }
        break;
      case 1: {
        PORTD = 0x01;
 1f8:	4b b9       	out	0x0b, r20	; 11
        PORTC = segs_out ^ 0xFF; // Compliment segment outputs
 1fa:	82 2f       	mov	r24, r18
 1fc:	80 95       	com	r24
 1fe:	88 b9       	out	0x08, r24	; 8
        DDRC = 0xFF; // always on
 200:	57 b9       	out	0x07, r21	; 7
        DDRD = 0x01; //COM1 asserted High
 202:	4a b9       	out	0x0a, r20	; 10
 204:	8a c0       	rjmp	.+276    	; 0x31a <main+0x20e>
        break;
      case 2: {
        segs_out = (segment_table[LCD_d_1]& 0x0C)/4; //get digit_1's A & B bits
        segs_out = segs_out | (segment_table[LCD_d_2]& 0x0C);//get digit_10's A & B bits
        segs_out = segs_out | ((segment_table[LCD_d_3]& 0x0C)*4); //get digit_100's A & B bits
        segs_out = segs_out | ((segment_table[LCD_d_4]& 0x0C)*16); //get digit_1000's A & B bits
 206:	80 81       	ld	r24, Z
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	8c 70       	andi	r24, 0x0C	; 12
 20c:	90 70       	andi	r25, 0x00	; 0
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	2c 91       	ld	r18, X
 218:	2c 70       	andi	r18, 0x0C	; 12
 21a:	28 2b       	or	r18, r24
 21c:	88 81       	ld	r24, Y
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	8c 70       	andi	r24, 0x0C	; 12
 222:	90 70       	andi	r25, 0x00	; 0
 224:	95 95       	asr	r25
 226:	87 95       	ror	r24
 228:	95 95       	asr	r25
 22a:	87 95       	ror	r24
 22c:	28 2b       	or	r18, r24
 22e:	fb 01       	movw	r30, r22
 230:	80 81       	ld	r24, Z
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	8c 70       	andi	r24, 0x0C	; 12
 236:	90 70       	andi	r25, 0x00	; 0
 238:	b4 e0       	ldi	r27, 0x04	; 4
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	ba 95       	dec	r27
 240:	e1 f7       	brne	.-8      	; 0x23a <main+0x12e>
 242:	28 2b       	or	r18, r24
        DDRD = 0;
 244:	1a b8       	out	0x0a, r1	; 10
        PORTD = 0x00;
 246:	1b b8       	out	0x0b, r1	; 11
        PORTC = segs_out;
 248:	28 b9       	out	0x08, r18	; 8
 24a:	04 c0       	rjmp	.+8      	; 0x254 <main+0x148>
        DDRC = 0xFF; // always on
        DDRD = 0x02; //COM2 asserted LOW
        }
        break;
      case 3: {
        PORTD = 0x02;
 24c:	ab b8       	out	0x0b, r10	; 11
        PORTC = segs_out ^ 0xFF; // Compliment segment outputs
 24e:	82 2f       	mov	r24, r18
 250:	80 95       	com	r24
 252:	88 b9       	out	0x08, r24	; 8
        DDRC =0xFF;
 254:	57 b9       	out	0x07, r21	; 7
        DDRD = 0x02; //COM2 asserted High
 256:	aa b8       	out	0x0a, r10	; 10
 258:	60 c0       	rjmp	.+192    	; 0x31a <main+0x20e>
        break;
      case 4: {
        segs_out = (segment_table[LCD_d_1]& 0x30)/16; //get digit_1's A & B bits
        segs_out = segs_out | ((segment_table[LCD_d_2]& 0x30)/4);//get digit_10's A & B bits
        segs_out = segs_out | (segment_table[LCD_d_3]& 0x30);//get digit_100's A & B bits
        segs_out = segs_out | ((segment_table[LCD_d_4]& 0x30)*4);//get digit_1000's A & B bits
 25a:	af 5f       	subi	r26, 0xFF	; 255
 25c:	be 4f       	sbci	r27, 0xFE	; 254
 25e:	8c 91       	ld	r24, X
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	80 73       	andi	r24, 0x30	; 48
 264:	90 70       	andi	r25, 0x00	; 0
 266:	95 95       	asr	r25
 268:	87 95       	ror	r24
 26a:	95 95       	asr	r25
 26c:	87 95       	ror	r24
 26e:	ef 5f       	subi	r30, 0xFF	; 255
 270:	fe 4f       	sbci	r31, 0xFE	; 254
 272:	20 81       	ld	r18, Z
 274:	20 73       	andi	r18, 0x30	; 48
 276:	28 2b       	or	r18, r24
 278:	cf 5f       	subi	r28, 0xFF	; 255
 27a:	de 4f       	sbci	r29, 0xFE	; 254
 27c:	88 81       	ld	r24, Y
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	80 73       	andi	r24, 0x30	; 48
 282:	90 70       	andi	r25, 0x00	; 0
 284:	e4 e0       	ldi	r30, 0x04	; 4
 286:	95 95       	asr	r25
 288:	87 95       	ror	r24
 28a:	ea 95       	dec	r30
 28c:	e1 f7       	brne	.-8      	; 0x286 <main+0x17a>
 28e:	28 2b       	or	r18, r24
 290:	fb 01       	movw	r30, r22
 292:	80 81       	ld	r24, Z
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	80 73       	andi	r24, 0x30	; 48
 298:	90 70       	andi	r25, 0x00	; 0
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	28 2b       	or	r18, r24
        DDRD = 0;
 2a4:	1a b8       	out	0x0a, r1	; 10
        PORTD = 0x00;
 2a6:	1b b8       	out	0x0b, r1	; 11
        PORTC = segs_out;
 2a8:	28 b9       	out	0x08, r18	; 8
 2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <main+0x1a8>
        DDRC = 0xFF;
        DDRD = 0x04; //COM3 asserted LOW
        }
        break;
      case 5: {
        PORTD = 0x04;
 2ac:	bb b8       	out	0x0b, r11	; 11
        PORTC = segs_out ^ 0xFF; // Compliment segment outputs
 2ae:	82 2f       	mov	r24, r18
 2b0:	80 95       	com	r24
 2b2:	88 b9       	out	0x08, r24	; 8
        DDRC = 0xFF;
 2b4:	57 b9       	out	0x07, r21	; 7
        DDRD = 0x04; //COM3 asserted High
 2b6:	ba b8       	out	0x0a, r11	; 10
 2b8:	30 c0       	rjmp	.+96     	; 0x31a <main+0x20e>
      case 6: {
        segs_out = (segment_table[LCD_d_1]& 0xC0)/64; //get digit_1's A & B bits
        segs_out = segs_out | ((segment_table[LCD_d_2]& 0xC0)/16); //get digit_10's A & B bits
        
        segs_out = segs_out | ((segment_table[LCD_d_3]& 0xC0)/4); //get digit_100's A & B bits
        segs_out = segs_out | (segment_table[LCD_d_4]& 0xC0); //get digit_1000's A & B bits
 2ba:	ef 5f       	subi	r30, 0xFF	; 255
 2bc:	fe 4f       	sbci	r31, 0xFE	; 254
 2be:	80 81       	ld	r24, Z
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	80 7c       	andi	r24, 0xC0	; 192
 2c4:	90 70       	andi	r25, 0x00	; 0
 2c6:	95 95       	asr	r25
 2c8:	87 95       	ror	r24
 2ca:	95 95       	asr	r25
 2cc:	87 95       	ror	r24
 2ce:	af 5f       	subi	r26, 0xFF	; 255
 2d0:	be 4f       	sbci	r27, 0xFE	; 254
 2d2:	2c 91       	ld	r18, X
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	20 7c       	andi	r18, 0xC0	; 192
 2d8:	30 70       	andi	r19, 0x00	; 0
 2da:	94 e0       	ldi	r25, 0x04	; 4
 2dc:	35 95       	asr	r19
 2de:	27 95       	ror	r18
 2e0:	9a 95       	dec	r25
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <main+0x1d0>
 2e4:	82 2b       	or	r24, r18
 2e6:	cf 5f       	subi	r28, 0xFF	; 255
 2e8:	de 4f       	sbci	r29, 0xFE	; 254
 2ea:	28 81       	ld	r18, Y
 2ec:	22 95       	swap	r18
 2ee:	26 95       	lsr	r18
 2f0:	26 95       	lsr	r18
 2f2:	23 70       	andi	r18, 0x03	; 3
 2f4:	28 2b       	or	r18, r24
 2f6:	fb 01       	movw	r30, r22
 2f8:	80 81       	ld	r24, Z
 2fa:	80 7c       	andi	r24, 0xC0	; 192
 2fc:	28 2b       	or	r18, r24
        DDRD = 0;
 2fe:	1a b8       	out	0x0a, r1	; 10
        PORTD = 0x00;
 300:	1b b8       	out	0x0b, r1	; 11
        // PORTC = 0x00;//LCD_d_3 ^ 0xFF; // Compliment segment outputs
        PORTC = segs_out;
 302:	28 b9       	out	0x08, r18	; 8
 304:	05 c0       	rjmp	.+10     	; 0x310 <main+0x204>
        DDRC = 0xFF;
        DDRD = 0x08; //COM4 asserted LOW
        }
        break;
      case 7: {
        PORTD = 0x08;
 306:	cb b8       	out	0x0b, r12	; 11
        PORTC = 0x55;
 308:	98 b8       	out	0x08, r9	; 8
        // PORTC = 0xFF; //LCD_d_3;
        PORTC = segs_out ^ 0xFF; // Compliment segment outputs
 30a:	82 2f       	mov	r24, r18
 30c:	80 95       	com	r24
 30e:	88 b9       	out	0x08, r24	; 8
        DDRC = 0xFF;
 310:	57 b9       	out	0x07, r21	; 7
        DDRD = 0x08; //COM4 asserted High
 312:	ca b8       	out	0x0a, r12	; 10
 314:	02 c0       	rjmp	.+4      	; 0x31a <main+0x20e>
        }
        break;
      default: DDRC = 0;
 316:	17 b8       	out	0x07, r1	; 7
        DDRD = 0; // COM1-COM4 float
 318:	1a b8       	out	0x0a, r1	; 10
 31a:	1f 5f       	subi	r17, 0xFF	; 255
      }
      
      // Increment a counter to measure out 0.1 sec
      Pt_1_sec++;
      if (Pt_1_sec >=50){//.1 sec
 31c:	12 33       	cpi	r17, 0x32	; 50
 31e:	98 f0       	brcs	.+38     	; 0x346 <main+0x23a>
        Pt_1_sec = 0;
        LCD_d_1++; // 3 1/2 digit ripple BCD counter for LCD digits
 320:	e3 94       	inc	r14
        if (LCD_d_1 >=10){
 322:	f9 e0       	ldi	r31, 0x09	; 9
 324:	fe 15       	cp	r31, r14
 326:	10 f4       	brcc	.+4      	; 0x32c <main+0x220>
        LCD_d_1 = 0;
        LCD_d_2++;}
 328:	f3 94       	inc	r15
 32a:	ee 24       	eor	r14, r14
        if (LCD_d_2 >=10){
 32c:	89 e0       	ldi	r24, 0x09	; 9
 32e:	8f 15       	cp	r24, r15
 330:	10 f4       	brcc	.+4      	; 0x336 <main+0x22a>
        LCD_d_2 = 0;
        LCD_d_3++;}
 332:	0f 5f       	subi	r16, 0xFF	; 255
 334:	ff 24       	eor	r15, r15
 336:	10 e0       	ldi	r17, 0x00	; 0
 338:	80 e0       	ldi	r24, 0x00	; 0
        if (LCD_d_3 >=10){
 33a:	0a 30       	cpi	r16, 0x0A	; 10
 33c:	08 f4       	brcc	.+2      	; 0x340 <main+0x234>
 33e:	14 cf       	rjmp	.-472    	; 0x168 <main+0x5c>
 340:	d3 94       	inc	r13
 342:	00 e0       	ldi	r16, 0x00	; 0
 344:	0d cf       	rjmp	.-486    	; 0x160 <main+0x54>
 346:	ff cf       	rjmp	.-2      	; 0x346 <main+0x23a>

00000348 <_exit>:
 348:	f8 94       	cli

0000034a <__stop_program>:
 34a:	ff cf       	rjmp	.-2      	; 0x34a <__stop_program>
