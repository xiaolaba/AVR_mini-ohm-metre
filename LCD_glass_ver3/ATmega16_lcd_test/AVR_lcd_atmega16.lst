
AVR_lcd_atmega16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000003ba  0000044e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800078  00800078  00000466  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000466  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000095  00000000  00000000  000004a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000290  00000000  00000000  0000053b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001b9  00000000  00000000  000007cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000342  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00000cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000165  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005e  00000000  00000000  00000e9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  8a:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_19>:
ISR(TIMER0_COMP_vect, ISR_NAKED)  // avr-gcc


{
	// COMx為0或1，時序圖中的0、2、4、6......E
	TIFR &= ~0x02;
  92:	88 b7       	in	r24, 0x38	; 56
  94:	8d 7f       	andi	r24, 0xFD	; 253
  96:	88 bf       	out	0x38, r24	; 56

	if(Turn++ == 0)  // COMx為0，時序圖中的0、4、8、C
  98:	80 91 78 00 	lds	r24, 0x0078
  9c:	8f 5f       	subi	r24, 0xFF	; 255
  9e:	80 93 78 00 	sts	0x0078, r24
  a2:	81 50       	subi	r24, 0x01	; 1
  a4:	30 91 79 00 	lds	r19, 0x0079
  a8:	88 23       	and	r24, r24
  aa:	39 f5       	brne	.+78     	; 0xfa <__vector_19+0x68>
	{
		// COMx為0，需要顯示的SEG（COMx）為1
		SEG_LOAD(frame[COM]);
  ac:	e3 2f       	mov	r30, r19
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	ee 0f       	add	r30, r30
  b2:	ff 1f       	adc	r31, r31
  b4:	e6 58       	subi	r30, 0x86	; 134
  b6:	ff 4f       	sbci	r31, 0xFF	; 255
  b8:	90 81       	ld	r25, Z
  ba:	81 81       	ldd	r24, Z+1	; 0x01
  bc:	92 bb       	out	0x12, r25	; 18
  be:	95 b3       	in	r25, 0x15	; 21
  c0:	8f 70       	andi	r24, 0x0F	; 15
  c2:	89 2b       	or	r24, r25
  c4:	85 bb       	out	0x15, r24	; 21

		// COMx為0，其它COM為VDD/2
		// 所有COM IO設定為懸浮輸入
		COM_ALL_HALF();
  c6:	8b b3       	in	r24, 0x1b	; 27
  c8:	80 7f       	andi	r24, 0xF0	; 240
  ca:	8b bb       	out	0x1b, r24	; 27
  cc:	8a b3       	in	r24, 0x1a	; 26
  ce:	80 7f       	andi	r24, 0xF0	; 240
  d0:	8a bb       	out	0x1a, r24	; 26

		// COMx IO設為推輓輸出低
		if(COM == 0)      {COM0_LOW();}
  d2:	33 23       	and	r19, r19
  d4:	19 f4       	brne	.+6      	; 0xdc <__vector_19+0x4a>
  d6:	d8 98       	cbi	0x1b, 0	; 27
  d8:	d0 9a       	sbi	0x1a, 0	; 26
  da:	44 c0       	rjmp	.+136    	; 0x164 <__vector_9>
		else if(COM == 1) {COM1_LOW();}
  dc:	31 30       	cpi	r19, 0x01	; 1
  de:	19 f4       	brne	.+6      	; 0xe6 <__vector_19+0x54>
  e0:	d9 98       	cbi	0x1b, 1	; 27
  e2:	d1 9a       	sbi	0x1a, 1	; 26
  e4:	3f c0       	rjmp	.+126    	; 0x164 <__vector_9>
		else if(COM == 2) {COM2_LOW();}
  e6:	32 30       	cpi	r19, 0x02	; 2
  e8:	19 f4       	brne	.+6      	; 0xf0 <__vector_19+0x5e>
  ea:	da 98       	cbi	0x1b, 2	; 27
  ec:	d2 9a       	sbi	0x1a, 2	; 26
  ee:	3a c0       	rjmp	.+116    	; 0x164 <__vector_9>
		else if(COM == 3) {COM3_LOW();}
  f0:	33 30       	cpi	r19, 0x03	; 3
  f2:	c1 f5       	brne	.+112    	; 0x164 <__vector_9>
  f4:	db 98       	cbi	0x1b, 3	; 27
  f6:	d3 9a       	sbi	0x1a, 3	; 26
  f8:	35 c0       	rjmp	.+106    	; 0x164 <__vector_9>
	}
	else  // COMx為1，時序圖中的2、6、A、E
	{
		Turn = 0;
  fa:	10 92 78 00 	sts	0x0078, r1

		// COMx為1，需要顯示的SEG（COMx）為0
		SEG_LOAD(~frame[COM]);
  fe:	e3 2f       	mov	r30, r19
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	ee 0f       	add	r30, r30
 104:	ff 1f       	adc	r31, r31
 106:	e6 58       	subi	r30, 0x86	; 134
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	80 81       	ld	r24, Z
 10c:	91 81       	ldd	r25, Z+1	; 0x01
 10e:	28 2f       	mov	r18, r24
 110:	20 95       	com	r18
 112:	22 bb       	out	0x12, r18	; 18
 114:	25 b3       	in	r18, 0x15	; 21
 116:	80 95       	com	r24
 118:	90 95       	com	r25
 11a:	89 2f       	mov	r24, r25
 11c:	8f 70       	andi	r24, 0x0F	; 15
 11e:	82 2b       	or	r24, r18
 120:	85 bb       	out	0x15, r24	; 21

		// COMx為1，其它COM為VDD/2
		// 所有COM IO設定為懸浮輸入
		COM_ALL_HALF();
 122:	8b b3       	in	r24, 0x1b	; 27
 124:	80 7f       	andi	r24, 0xF0	; 240
 126:	8b bb       	out	0x1b, r24	; 27
 128:	8a b3       	in	r24, 0x1a	; 26
 12a:	80 7f       	andi	r24, 0xF0	; 240
 12c:	8a bb       	out	0x1a, r24	; 26

		// COMx IO設為推輓輸出高
		if(COM == 0)      {COM0_HIGH();}
 12e:	33 23       	and	r19, r19
 130:	19 f4       	brne	.+6      	; 0x138 <__vector_19+0xa6>
 132:	d8 9a       	sbi	0x1b, 0	; 27
 134:	d0 9a       	sbi	0x1a, 0	; 26
 136:	0e c0       	rjmp	.+28     	; 0x154 <__vector_19+0xc2>
		else if(COM == 1) {COM1_HIGH();}
 138:	31 30       	cpi	r19, 0x01	; 1
 13a:	19 f4       	brne	.+6      	; 0x142 <__vector_19+0xb0>
 13c:	d9 9a       	sbi	0x1b, 1	; 27
 13e:	d1 9a       	sbi	0x1a, 1	; 26
 140:	09 c0       	rjmp	.+18     	; 0x154 <__vector_19+0xc2>
		else if(COM == 2) {COM2_HIGH();}
 142:	32 30       	cpi	r19, 0x02	; 2
 144:	19 f4       	brne	.+6      	; 0x14c <__vector_19+0xba>
 146:	da 9a       	sbi	0x1b, 2	; 27
 148:	d2 9a       	sbi	0x1a, 2	; 26
 14a:	04 c0       	rjmp	.+8      	; 0x154 <__vector_19+0xc2>
		else if(COM == 3) {COM3_HIGH();}
 14c:	33 30       	cpi	r19, 0x03	; 3
 14e:	11 f4       	brne	.+4      	; 0x154 <__vector_19+0xc2>
 150:	db 9a       	sbi	0x1b, 3	; 27
 152:	d3 9a       	sbi	0x1a, 3	; 26

		if(++COM > 3) COM = 0;
 154:	83 2f       	mov	r24, r19
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	80 93 79 00 	sts	0x0079, r24
 15c:	84 30       	cpi	r24, 0x04	; 4
 15e:	10 f0       	brcs	.+4      	; 0x164 <__vector_9>
 160:	10 92 79 00 	sts	0x0079, r1

00000164 <__vector_9>:
ISR (TIMER0_OVF_vect, ISR_NAKED)    // avr-gcc


{
	// 時序圖中的1，3，5，7......F，COM和SEG都為0
	TIFR &= ~0x01;
 164:	88 b7       	in	r24, 0x38	; 56
 166:	8e 7f       	andi	r24, 0xFE	; 254
 168:	88 bf       	out	0x38, r24	; 56

	// COM和SEG都為0
	COM_SEG_ALL_LOW();
 16a:	8b b3       	in	r24, 0x1b	; 27
 16c:	80 7f       	andi	r24, 0xF0	; 240
 16e:	8b bb       	out	0x1b, r24	; 27
 170:	8a b3       	in	r24, 0x1a	; 26
 172:	8f 60       	ori	r24, 0x0F	; 15
 174:	8a bb       	out	0x1a, r24	; 26
 176:	85 b3       	in	r24, 0x15	; 21
 178:	80 7f       	andi	r24, 0xF0	; 240
 17a:	85 bb       	out	0x15, r24	; 21
 17c:	82 b3       	in	r24, 0x12	; 18
 17e:	12 ba       	out	0x12, r1	; 18

00000180 <LCDShow_Init>:
/*
	DDRA |= 0x0f;    // COM0~3
	DDRC |= 0x0f;      // SEG8~11
	DDRD |= 0x0f;      // SEG0~7
*/
	COM_DDR |= 0x0f; // COM0~3
 180:	8a b3       	in	r24, 0x1a	; 26
 182:	8f 60       	ori	r24, 0x0F	; 15
 184:	8a bb       	out	0x1a, r24	; 26
	SEG_DDRC |= 0xff;  // SEG8~11
 186:	84 b3       	in	r24, 0x14	; 20
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	84 bb       	out	0x14, r24	; 20
	SEG_DDRD |= 0xff;  // SEG0~7
 18c:	91 b3       	in	r25, 0x11	; 17
 18e:	81 bb       	out	0x11, r24	; 17

	TCCR0 = 0x4A;   // 配置定時器工作在快速PWM模式，8分頻
 190:	8a e4       	ldi	r24, 0x4A	; 74
 192:	83 bf       	out	0x33, r24	; 51
	OCR0 = 0x3f;    // 設定捕捉比較初值，0x3f
 194:	8f e3       	ldi	r24, 0x3F	; 63
 196:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= 0x03;  // 開捕獲中斷，溢出中斷
 198:	89 b7       	in	r24, 0x39	; 57
 19a:	83 60       	ori	r24, 0x03	; 3
 19c:	89 bf       	out	0x39, r24	; 57
	SREG |= 0x80;   // 開總中斷
 19e:	8f b7       	in	r24, 0x3f	; 63
 1a0:	80 68       	ori	r24, 0x80	; 128
 1a2:	8f bf       	out	0x3f, r24	; 63
}
 1a4:	08 95       	ret

000001a6 <main>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1a6:	80 e4       	ldi	r24, 0x40	; 64
 1a8:	9c e9       	ldi	r25, 0x9C	; 156
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <main+0x4>
int main(void)
{
//	Delayms(10);
	_delay_ms(10);

	LCDShow_Init();
 1ae:	0e 94 c0 00 	call	0x180	; 0x180 <LCDShow_Init>

	LCD_Write_Str((unsigned char*) "012345");
 1b2:	80 e6       	ldi	r24, 0x60	; 96
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LCD_Write_Str>
	LCD_Show_Dot(0);
 1ba:	80 91 7a 00 	lds	r24, 0x007A
 1be:	90 91 7b 00 	lds	r25, 0x007B
 1c2:	80 68       	ori	r24, 0x80	; 128
 1c4:	90 93 7b 00 	sts	0x007B, r25
 1c8:	80 93 7a 00 	sts	0x007A, r24
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <main+0x26>

000001ce <LCD_Write_Str>:

/*------------------------------------------------------------------------------
函式名：void LCD_Write_Str(u8 *str)
------------------------------------------------------------------------------*/
void LCD_Write_Str(uint8_t *str)
{
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	8c 01       	movw	r16, r24
	uint8_t i, Show_Char;
    
    Show_Char=0; //init, remove warning

	frame[0] = 0;
 1d8:	10 92 7b 00 	sts	0x007B, r1
 1dc:	10 92 7a 00 	sts	0x007A, r1
	frame[1] = 0;
 1e0:	10 92 7d 00 	sts	0x007D, r1
 1e4:	10 92 7c 00 	sts	0x007C, r1
	frame[2] = 0;
 1e8:	10 92 7f 00 	sts	0x007F, r1
 1ec:	10 92 7e 00 	sts	0x007E, r1
	frame[3] = 0;
 1f0:	10 92 81 00 	sts	0x0081, r1
 1f4:	10 92 80 00 	sts	0x0080, r1
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	50 e0       	ldi	r21, 0x00	; 0
		else if((*(str + i) < 0x47) && (*(str + i) > 0x40))  // 字母'A'~'F'
			Show_Char = number[*(str + i) - 55];
		else if((*(str + i) < 0x67) && (*(str + i) > 0x60))  // 字母'a'~'f'
			Show_Char = number[*(str + i) - 87];

		if(Show_Char & 0x01) frame[0] |= 0x0001 << (i << 1);
 1fe:	c1 e0       	ldi	r28, 0x01	; 1
 200:	d0 e0       	ldi	r29, 0x00	; 0
		if(Show_Char & 0x10) frame[0] |= 0x0002 << (i << 1);
 202:	a2 e0       	ldi	r26, 0x02	; 2
 204:	b0 e0       	ldi	r27, 0x00	; 0
	frame[3] = 0;

	for (i=0; i<6; i++)
	{
		// 查詢碼段儲存在Show_Char
		if((*(str + i) < 0x3A) && (*(str + i) > 0x2F))       // 數字'0'~'9'
 206:	f8 01       	movw	r30, r16
 208:	e4 0f       	add	r30, r20
 20a:	f5 1f       	adc	r31, r21
 20c:	e0 81       	ld	r30, Z
 20e:	8e 2f       	mov	r24, r30
 210:	80 53       	subi	r24, 0x30	; 48
 212:	8a 30       	cpi	r24, 0x0A	; 10
 214:	20 f4       	brcc	.+8      	; 0x21e <LCD_Write_Str+0x50>
			Show_Char = number[*(str + i) - 0x30];
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	e9 5c       	subi	r30, 0xC9	; 201
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	0f c0       	rjmp	.+30     	; 0x23c <LCD_Write_Str+0x6e>
		else if((*(str + i) < 0x47) && (*(str + i) > 0x40))  // 字母'A'~'F'
 21e:	8e 2f       	mov	r24, r30
 220:	81 54       	subi	r24, 0x41	; 65
 222:	86 30       	cpi	r24, 0x06	; 6
 224:	20 f4       	brcc	.+8      	; 0x22e <LCD_Write_Str+0x60>
			Show_Char = number[*(str + i) - 55];
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	e0 5d       	subi	r30, 0xD0	; 208
 22a:	ff 4f       	sbci	r31, 0xFF	; 255
 22c:	07 c0       	rjmp	.+14     	; 0x23c <LCD_Write_Str+0x6e>
		else if((*(str + i) < 0x67) && (*(str + i) > 0x60))  // 字母'a'~'f'
 22e:	8e 2f       	mov	r24, r30
 230:	81 56       	subi	r24, 0x61	; 97
 232:	86 30       	cpi	r24, 0x06	; 6
 234:	20 f4       	brcc	.+8      	; 0x23e <LCD_Write_Str+0x70>
			Show_Char = number[*(str + i) - 87];
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	e0 5f       	subi	r30, 0xF0	; 240
 23a:	ff 4f       	sbci	r31, 0xFF	; 255
 23c:	70 81       	ld	r23, Z

		if(Show_Char & 0x01) frame[0] |= 0x0001 << (i << 1);
 23e:	67 2f       	mov	r22, r23
 240:	70 ff       	sbrs	r23, 0
 242:	14 c0       	rjmp	.+40     	; 0x26c <LCD_Write_Str+0x9e>
 244:	ca 01       	movw	r24, r20
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	9e 01       	movw	r18, r28
 24c:	02 c0       	rjmp	.+4      	; 0x252 <LCD_Write_Str+0x84>
 24e:	22 0f       	add	r18, r18
 250:	33 1f       	adc	r19, r19
 252:	8a 95       	dec	r24
 254:	e2 f7       	brpl	.-8      	; 0x24e <LCD_Write_Str+0x80>
 256:	c9 01       	movw	r24, r18
 258:	20 91 7a 00 	lds	r18, 0x007A
 25c:	30 91 7b 00 	lds	r19, 0x007B
 260:	82 2b       	or	r24, r18
 262:	93 2b       	or	r25, r19
 264:	90 93 7b 00 	sts	0x007B, r25
 268:	80 93 7a 00 	sts	0x007A, r24
		if(Show_Char & 0x10) frame[0] |= 0x0002 << (i << 1);
 26c:	64 ff       	sbrs	r22, 4
 26e:	14 c0       	rjmp	.+40     	; 0x298 <LCD_Write_Str+0xca>
 270:	ca 01       	movw	r24, r20
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	9d 01       	movw	r18, r26
 278:	02 c0       	rjmp	.+4      	; 0x27e <LCD_Write_Str+0xb0>
 27a:	22 0f       	add	r18, r18
 27c:	33 1f       	adc	r19, r19
 27e:	8a 95       	dec	r24
 280:	e2 f7       	brpl	.-8      	; 0x27a <LCD_Write_Str+0xac>
 282:	c9 01       	movw	r24, r18
 284:	20 91 7a 00 	lds	r18, 0x007A
 288:	30 91 7b 00 	lds	r19, 0x007B
 28c:	82 2b       	or	r24, r18
 28e:	93 2b       	or	r25, r19
 290:	90 93 7b 00 	sts	0x007B, r25
 294:	80 93 7a 00 	sts	0x007A, r24
		if(Show_Char & 0x02) frame[1] |= 0x0001 << (i << 1);
 298:	61 ff       	sbrs	r22, 1
 29a:	14 c0       	rjmp	.+40     	; 0x2c4 <LCD_Write_Str+0xf6>
 29c:	ca 01       	movw	r24, r20
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	9e 01       	movw	r18, r28
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <LCD_Write_Str+0xdc>
 2a6:	22 0f       	add	r18, r18
 2a8:	33 1f       	adc	r19, r19
 2aa:	8a 95       	dec	r24
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <LCD_Write_Str+0xd8>
 2ae:	c9 01       	movw	r24, r18
 2b0:	20 91 7c 00 	lds	r18, 0x007C
 2b4:	30 91 7d 00 	lds	r19, 0x007D
 2b8:	82 2b       	or	r24, r18
 2ba:	93 2b       	or	r25, r19
 2bc:	90 93 7d 00 	sts	0x007D, r25
 2c0:	80 93 7c 00 	sts	0x007C, r24
		if(Show_Char & 0x20) frame[1] |= 0x0002 << (i << 1);
 2c4:	65 ff       	sbrs	r22, 5
 2c6:	14 c0       	rjmp	.+40     	; 0x2f0 <LCD_Write_Str+0x122>
 2c8:	ca 01       	movw	r24, r20
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	9d 01       	movw	r18, r26
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <LCD_Write_Str+0x108>
 2d2:	22 0f       	add	r18, r18
 2d4:	33 1f       	adc	r19, r19
 2d6:	8a 95       	dec	r24
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <LCD_Write_Str+0x104>
 2da:	c9 01       	movw	r24, r18
 2dc:	20 91 7c 00 	lds	r18, 0x007C
 2e0:	30 91 7d 00 	lds	r19, 0x007D
 2e4:	82 2b       	or	r24, r18
 2e6:	93 2b       	or	r25, r19
 2e8:	90 93 7d 00 	sts	0x007D, r25
 2ec:	80 93 7c 00 	sts	0x007C, r24
		if(Show_Char & 0x04) frame[2] |= 0x0001 << (i << 1);
 2f0:	62 ff       	sbrs	r22, 2
 2f2:	14 c0       	rjmp	.+40     	; 0x31c <LCD_Write_Str+0x14e>
 2f4:	ca 01       	movw	r24, r20
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	9e 01       	movw	r18, r28
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <LCD_Write_Str+0x134>
 2fe:	22 0f       	add	r18, r18
 300:	33 1f       	adc	r19, r19
 302:	8a 95       	dec	r24
 304:	e2 f7       	brpl	.-8      	; 0x2fe <LCD_Write_Str+0x130>
 306:	c9 01       	movw	r24, r18
 308:	20 91 7e 00 	lds	r18, 0x007E
 30c:	30 91 7f 00 	lds	r19, 0x007F
 310:	82 2b       	or	r24, r18
 312:	93 2b       	or	r25, r19
 314:	90 93 7f 00 	sts	0x007F, r25
 318:	80 93 7e 00 	sts	0x007E, r24
		if(Show_Char & 0x40) frame[2] |= 0x0002 << (i << 1);
 31c:	66 ff       	sbrs	r22, 6
 31e:	14 c0       	rjmp	.+40     	; 0x348 <LCD_Write_Str+0x17a>
 320:	ca 01       	movw	r24, r20
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	9d 01       	movw	r18, r26
 328:	02 c0       	rjmp	.+4      	; 0x32e <LCD_Write_Str+0x160>
 32a:	22 0f       	add	r18, r18
 32c:	33 1f       	adc	r19, r19
 32e:	8a 95       	dec	r24
 330:	e2 f7       	brpl	.-8      	; 0x32a <LCD_Write_Str+0x15c>
 332:	c9 01       	movw	r24, r18
 334:	20 91 7e 00 	lds	r18, 0x007E
 338:	30 91 7f 00 	lds	r19, 0x007F
 33c:	82 2b       	or	r24, r18
 33e:	93 2b       	or	r25, r19
 340:	90 93 7f 00 	sts	0x007F, r25
 344:	80 93 7e 00 	sts	0x007E, r24
		if(Show_Char & 0x08) frame[3] |= 0x0001 << (i << 1);
 348:	63 ff       	sbrs	r22, 3
 34a:	14 c0       	rjmp	.+40     	; 0x374 <LCD_Write_Str+0x1a6>
 34c:	ca 01       	movw	r24, r20
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	9e 01       	movw	r18, r28
 354:	02 c0       	rjmp	.+4      	; 0x35a <LCD_Write_Str+0x18c>
 356:	22 0f       	add	r18, r18
 358:	33 1f       	adc	r19, r19
 35a:	8a 95       	dec	r24
 35c:	e2 f7       	brpl	.-8      	; 0x356 <LCD_Write_Str+0x188>
 35e:	c9 01       	movw	r24, r18
 360:	20 91 80 00 	lds	r18, 0x0080
 364:	30 91 81 00 	lds	r19, 0x0081
 368:	82 2b       	or	r24, r18
 36a:	93 2b       	or	r25, r19
 36c:	90 93 81 00 	sts	0x0081, r25
 370:	80 93 80 00 	sts	0x0080, r24
		if(Show_Char & 0x80) frame[3] |= 0x0002 << (i << 1);
 374:	77 ff       	sbrs	r23, 7
 376:	14 c0       	rjmp	.+40     	; 0x3a0 <LCD_Write_Str+0x1d2>
 378:	ca 01       	movw	r24, r20
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	9d 01       	movw	r18, r26
 380:	02 c0       	rjmp	.+4      	; 0x386 <LCD_Write_Str+0x1b8>
 382:	22 0f       	add	r18, r18
 384:	33 1f       	adc	r19, r19
 386:	8a 95       	dec	r24
 388:	e2 f7       	brpl	.-8      	; 0x382 <LCD_Write_Str+0x1b4>
 38a:	c9 01       	movw	r24, r18
 38c:	20 91 80 00 	lds	r18, 0x0080
 390:	30 91 81 00 	lds	r19, 0x0081
 394:	82 2b       	or	r24, r18
 396:	93 2b       	or	r25, r19
 398:	90 93 81 00 	sts	0x0081, r25
 39c:	80 93 80 00 	sts	0x0080, r24
 3a0:	4f 5f       	subi	r20, 0xFF	; 255
 3a2:	5f 4f       	sbci	r21, 0xFF	; 255
	frame[0] = 0;
	frame[1] = 0;
	frame[2] = 0;
	frame[3] = 0;

	for (i=0; i<6; i++)
 3a4:	46 30       	cpi	r20, 0x06	; 6
 3a6:	51 05       	cpc	r21, r1
 3a8:	09 f0       	breq	.+2      	; 0x3ac <LCD_Write_Str+0x1de>
 3aa:	2d cf       	rjmp	.-422    	; 0x206 <LCD_Write_Str+0x38>
		if(Show_Char & 0x04) frame[2] |= 0x0001 << (i << 1);
		if(Show_Char & 0x40) frame[2] |= 0x0002 << (i << 1);
		if(Show_Char & 0x08) frame[3] |= 0x0001 << (i << 1);
		if(Show_Char & 0x80) frame[3] |= 0x0002 << (i << 1);
	}
}
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	1f 91       	pop	r17
 3b2:	0f 91       	pop	r16
 3b4:	08 95       	ret

000003b6 <_exit>:
 3b6:	f8 94       	cli

000003b8 <__stop_program>:
 3b8:	ff cf       	rjmp	.-2      	; 0x3b8 <__stop_program>
